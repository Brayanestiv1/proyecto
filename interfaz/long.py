import hashlib  # Para encriptar contrase√±as
import json  # Para manejar archivos JSON
import os  # Para operaciones del sistema, como limpiar la consola
from . import menu  # Importaci√≥n relativa del m√≥dulo 'menu'

# Funci√≥n para encriptar la contrase√±a usando SHA-256
def encriptar_contrase√±a(contrase√±a):
    return hashlib.sha256(contrase√±a.encode()).hexdigest()

# Funci√≥n de inicio de sesi√≥n
def iniciar_sesion():
    while True:  # Permitir m√∫ltiples intentos hasta que se logre el inicio de sesi√≥n
        os.system('clear' if os.name != 'nt' else 'cls')  # Limpiar la consola
        print("="*60)
        print("            üìö INICIO DE SESI√ìN üìö            ")
        print("="*60)

        usuario = input("---> Ingrese su usuario: ").strip()  # Solicitar nombre de usuario

        # Validar que el nombre no contenga n√∫meros
        if any(char.isdigit() for char in usuario):
            print(">>> ‚ùå Error. El nombre de usuario no puede contener n√∫meros.")
            input("Presione enter para intentar de nuevo...")
            continue  # Volver a solicitar el nombre de usuario

        while True:  # Bucle para ingresar la contrase√±a
            contrase√±a_guardada = cargar_contrase√±a()  # Cargar la contrase√±a guardada
            contrase√±a = input("---> Ingrese la contrase√±a: ").strip()  # Solicitar contrase√±a
            error_msg = ""

            # Comparar la contrase√±a ingresada con la guardada
            if encriptar_contrase√±a(contrase√±a) == contrase√±a_guardada:
                print("\n  üéì Acceso concedido. Bienvenido, {}! üéì\n".format(usuario))
                input("Presione enter para ir al menu principal. . .")  # Esperar entrada del usuario
                os.system("clear")  # Limpiar la consola despu√©s de ingresar
                return  # Salir de la funci√≥n para mostrar el men√∫
            else:
                print(">>> ‚ùå Error. Contrase√±a incorrecta.")  # Mensaje de error si la contrase√±a es incorrecta
                input("Presione enter para intentar de nuevo...")  # Esperar entrada del usuario

# Funci√≥n para cargar la contrase√±a del archivo JSON
def cargar_contrase√±a():
    try:
        with open("data/contrase√±a.json", "r") as archivo:  # Intentar abrir el archivo de contrase√±a
            datos = json.load(archivo)  # Cargar datos JSON
            return datos["contrase√±a"]  # Retornar la contrase√±a guardada
    except (FileNotFoundError, json.JSONDecodeError):
        # Crear la carpeta 'data' si no existe
        os.makedirs("data", exist_ok=True)
        # Guardar la contrase√±a predeterminada
        guardar_contrase√±a("SISGESA")  # Llamar a la funci√≥n para guardar la contrase√±a predeterminada
        # Cargar de nuevo la contrase√±a guardada
        return cargar_contrase√±a()

# Funci√≥n para guardar la contrase√±a en el archivo JSON
def guardar_contrase√±a(contrase√±a):
    try:
        with open("data/contrase√±a.json", "w") as archivo:  # Abrir el archivo para escritura
            json.dump({"contrase√±a": encriptar_contrase√±a(contrase√±a)}, archivo)  # Guardar la contrase√±a encriptada
    except Exception as e:
        print(f">>> ‚ö†Ô∏è Error al guardar la contrase√±a: {e}")  # Mensaje de error si hay un problema al guardar

# Limpiar la consola antes de iniciar sesi√≥n
os.system("clear")

# Iniciar sesi√≥n
iniciar_sesion()

# Mostrar el men√∫ despu√©s de un inicio de sesi√≥n exitoso
os.system("clear")
menu.mostrar_menu()  # Llama a la funci√≥n mostrar_menu() de 'menu'
